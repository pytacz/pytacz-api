<?php

namespace ApiBundle\Repository;

use ApiBundle\Entity\Notebook;
use ApiBundle\Entity\User;

/**
 * NotebookRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class NotebookRepository extends \Doctrine\ORM\EntityRepository
{
    public function getNotebook($id)
    {
        $query = $this->getEntityManager()
            ->createQuery(
                'SELECT n.id, n.name, n.private FROM ApiBundle:Notebook n
            WHERE n.id = :id')
            ->setParameters([
                'id' => $id
            ]);
        return $query->getResult();
    }

    public function getAllPublicNotebooks($user)
    {
        $query = $this->getEntityManager()
            ->createQuery(
                'SELECT n.id, n.name, n.private FROM ApiBundle:Notebook n
            WHERE n.user = :user AND n.private = false
            ORDER BY n.id DESC')
            ->setParameters([
                'user' => $user
            ]);
        return $query->getResult();
    }

    public function getAllNotebooks($user)
    {
        $query = $this->getEntityManager()
            ->createQuery(
                'SELECT n.id, n.name, n.private FROM ApiBundle:Notebook n
            WHERE n.user = :user
            ORDER BY n.id DESC')
            ->setParameters([
                'user' => $user
            ]);
        return $query->getResult();
    }

    public function findAllNotes($notebook, $startPoint)
    {
        if ($startPoint == null) {
            $query = $this->getEntityManager()
                ->createQuery(
                    'SELECT n.id, n.name, n.content, n.askable FROM ApiBundle:Note n
                WHERE n.notebook = :notebook
                ORDER BY n.id DESC')
                ->setMaxResults(20)
                ->setParameters([
                    'notebook' => $notebook
                ]);
        } else {
            $query = $this->getEntityManager()
                ->createQuery(
                    'SELECT n.id, n.name, n.content, n.askable FROM ApiBundle:Note n
                WHERE n.notebook = :notebook AND n.id <= :start
                ORDER BY n.id DESC')
                ->setMaxResults(20)
                ->setParameters([
                    'notebook' => $notebook,
                    'start' => $startPoint
                ]);
        }
        return $query->getResult();
    }

    public function countNotebooks($user)
    {
        $query = $this->getEntityManager()
            ->createQuery(
                'SELECT COUNT(n.id) amount FROM ApiBundle:Notebook n
            WHERE n.user = :user')
            ->setParameters([
                'user' => $user
            ]);
        return $query->getResult();
    }

    public function getIncorrectNoteQuestions(Notebook $notebook, User $user, $limit, $reverse)
    {
        $conn = $this->getEntityManager()
            ->getConnection();

        if ($reverse === true) {
            $sqlData = 'SELECT n.content';
        } else {
            $sqlData = 'SELECT n.name';
        }
        $sql = $sqlData . ", n.id, COUNT(a.id) as counter
            FROM notes n
            LEFT JOIN answers a ON a.id_note = n.id AND a.correct = 'false' AND a.id_user = :user
            WHERE n.id_notebook = :notebook
            GROUP BY n.id
            ORDER BY counter ASC, random()
            LIMIT :limit
        ";
        $stmt = $conn->prepare($sql);
        $stmt->execute(['user' => $user->getId(), 'notebook' => $notebook->getId(), 'limit' => $limit]);

        return $stmt->fetchAll();
    }

    public function getCorrectNoteQuestions(Notebook $notebook, User $user, int $limit, $reverse)
    {
        $conn = $this->getEntityManager()
            ->getConnection();

        if ($reverse === true) {
            $sqlData = 'SELECT n.content';
        } else {
            $sqlData = 'SELECT n.name';
        }
        $sql = $sqlData . ", n.id
            FROM notes n
            JOIN answers a ON a.id_note = n.id AND a.correct = 'true' AND a.id_user = :user
            WHERE n.id_notebook = :notebook
            GROUP BY n.id
            ORDER BY random()
            LIMIT :limit
        ";
        $stmt = $conn->prepare($sql);
        $stmt->execute(['user' => $user->getId(), 'notebook' => $notebook->getId(), 'limit' => $limit]);

        return $stmt->fetchAll();
    }

    public function getOneIncorrectNoteQuestion(Notebook $notebook, User $user, $reverse)
    {
        $conn = $this->getEntityManager()
            ->getConnection();

        if ($reverse === true) {
            $sqlData = 'SELECT n.content';
        } else {
            $sqlData = 'SELECT n.name';
        }
        $sql = $sqlData . ", n.id
            FROM notes n
            JOIN answers a ON a.id_note = n.id AND a.correct = 'false' AND a.id_user = :user
            WHERE n.id_notebook = :notebook
            GROUP BY n.id
            ORDER BY random()
            LIMIT 1
        ";
        $stmt = $conn->prepare($sql);
        $stmt->execute(['user' => $user->getId(), 'notebook' => $notebook->getId()]);

        return $stmt->fetchAll();
    }
}
