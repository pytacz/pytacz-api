<?php

namespace ApiBundle\Repository;

/**
 * NotebookRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class NotebookRepository extends \Doctrine\ORM\EntityRepository
{
    public function getNotebook($id)
    {
        $query = $this->getEntityManager()
            ->createQuery(
                'SELECT n.id, n.name, n.private FROM ApiBundle:Notebook n
            WHERE n.id = :id')
            ->setParameters([
                'id' => $id
            ]);
        return $query->getResult();
    }

    public function getAllPublicNotebooks($user)
    {
        $query = $this->getEntityManager()
            ->createQuery(
                'SELECT n.id, n.name, n.private FROM ApiBundle:Notebook n
            WHERE n.user = :user AND n.private = false
            ORDER BY n.id DESC')
            ->setParameters([
                'user' => $user
            ]);
        return $query->getResult();
    }

    public function getAllNotebooks($user)
    {
        $query = $this->getEntityManager()
            ->createQuery(
                'SELECT n.id, n.name, n.private FROM ApiBundle:Notebook n
            WHERE n.user = :user
            ORDER BY n.id DESC')
            ->setParameters([
                'user' => $user
            ]);
        return $query->getResult();
    }

    public function findAllNotes($notebook, $startPoint)
    {
        if ($startPoint == null) {
            $query = $this->getEntityManager()
                ->createQuery(
                    'SELECT n.id, n.name, n.content, n.askable FROM ApiBundle:Note n
                WHERE n.notebook = :notebook
                ORDER BY n.id DESC')
                ->setMaxResults(20)
                ->setParameters([
                    'notebook' => $notebook
                ]);
        } else {
            $query = $this->getEntityManager()
                ->createQuery(
                    'SELECT n.id, n.name, n.content, n.askable FROM ApiBundle:Note n
                WHERE n.notebook = :notebook AND n.id <= :start
                ORDER BY n.id DESC')
                ->setMaxResults(20)
                ->setParameters([
                    'notebook' => $notebook,
                    'start' => $startPoint
                ]);
        }
        return $query->getResult();
    }

    public function countNotebooks($user)
    {
        $query = $this->getEntityManager()
            ->createQuery(
                'SELECT COUNT(n.id) amount FROM ApiBundle:Notebook n
            WHERE n.user = :user')
            ->setParameters([
                'user' => $user
            ]);
        return $query->getResult();
    }
}
